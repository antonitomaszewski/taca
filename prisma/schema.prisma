generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parish {
  id               String            @id @default(cuid())
  name             String
  address          String
  city             String            @default("Wroc≈Çaw")
  zipCode          String?
  latitude         Float
  longitude        Float
  phone            String?
  email            String?
  website          String?
  description      String?
  pastor           String?
  massSchedule     String?
  bankAccount      String?
  uniqueSlug       String?           @unique
  photoUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  fundraisingGoals FundraisingGoal[]
  payments         Payment[]
  users            User[]

  @@map("parishes")
}

model FundraisingGoal {
  id            String    @id @default(cuid())
  title         String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parishId      String
  parish        Parish    @relation(fields: [parishId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@map("fundraising_goals")
}

model Payment {
  id                String           @id @default(cuid())
  amount            Float
  donorName         String?
  donorEmail        String?
  message           String?
  isAnonymous       Boolean          @default(false)
  status            PaymentStatus    @default(PENDING)
  paymentMethod     String?
  transactionId     String?
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  parishId          String
  fundraisingGoalId String?
  fundraisingGoal   FundraisingGoal? @relation(fields: [fundraisingGoalId], references: [id])
  parish            Parish           @relation(fields: [parishId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(PARISH_ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parishId      String?
  accounts      Account[]
  sessions      Session[]
  parish        Parish?   @relation(fields: [parishId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  PARISH_ADMIN
  SUPER_ADMIN
}
